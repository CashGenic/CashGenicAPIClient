// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using CashGenicClient;
//
//    var systemDetail = SystemDetail.FromJson(jsonString);

namespace CashGenicClient
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SystemDetail
    {
        [JsonProperty("paymentDevices")]
        public List<PaymentDevice> PaymentDevices { get; set; }

        [JsonProperty("systemVersion")]
        public string SystemVersion { get; set; }
    }

    public partial class PaymentDevice
    {
        [JsonProperty("countryCode")]
        public Country CountryCode { get; set; }

        [JsonProperty("datasetVersion")]
        public string DatasetVersion { get; set; }

        [JsonProperty("denominations")]
        public List<Denomination> Denominations { get; set; }

        [JsonProperty("firmwareVersion")]
        public string FirmwareVersion { get; set; }

        [JsonProperty("isConnected")]
        public bool IsConnected { get; set; }

        [JsonProperty("paymentType")]
        public string PaymentType { get; set; }

        [JsonProperty("serialNumber")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long SerialNumber { get; set; }

        [JsonProperty("storedValue")]
        public long StoredValue { get; set; }
    }

    public partial class Denomination
    {
        [JsonProperty("country")]
        public Country Country { get; set; }

        [JsonProperty("route")]
        public Route Route { get; set; }

        [JsonProperty("storedLevel")]
        public long StoredLevel { get; set; }

        [JsonProperty("storedValue")]
        public long StoredValue { get; set; }

        [JsonProperty("value")]
        public long Value { get; set; }
    }

    public enum Country { EUR,GBP,BRL };

    public enum Route { Cashbox, Payout };

    public partial class SystemDetail
    {
        public static SystemDetail FromJson(string json) => JsonConvert.DeserializeObject<SystemDetail>(json, CashGenicClient.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SystemDetail self) => JsonConvert.SerializeObject(self, CashGenicClient.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CountryConverter.Singleton,
                RouteConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CountryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Country) || t == typeof(Country?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "EUR")
            {
                return Country.EUR;
            }
            if (value == "GBP")
            {
                return Country.GBP;
            }
            if (value == "BRL")
            {
                return Country.GBP;
            }


            throw new Exception("Cannot unmarshal type Country");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Country)untypedValue;
            if (value == Country.EUR)
            {
                serializer.Serialize(writer, "EUR");
                return;
            }
            if (value == Country.GBP)
            {
                serializer.Serialize(writer, "GBP");
                return;
            }
            if (value == Country.BRL)
            {
                serializer.Serialize(writer, "BRL");
                return;
            }
            throw new Exception("Cannot marshal type Country");
        }

        public static readonly CountryConverter Singleton = new CountryConverter();
    }

    internal class RouteConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Route) || t == typeof(Route?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Cashbox":
                    return Route.Cashbox;
                case "Payout":
                    return Route.Payout;
            }
            throw new Exception("Cannot unmarshal type Route");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Route)untypedValue;
            switch (value)
            {
                case Route.Cashbox:
                    serializer.Serialize(writer, "Cashbox");
                    return;
                case Route.Payout:
                    serializer.Serialize(writer, "Payout");
                    return;
            }
            throw new Exception("Cannot marshal type Route");
        }

        public static readonly RouteConverter Singleton = new RouteConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}

